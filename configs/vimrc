" initialize our vimrc loader
execute 'source ' . $RCDIR . '/configs/vim/init.vim'

" load in our various script files to construct our particular set of
" settings.
call g:myVim.LoadScript('directory-vimrc')
call g:myVim.LoadScript('projects')
call g:myVim.LoadScript('mappings')
call g:myVim.LoadScript('settings')
call g:myVim.LoadScript('filetypes')

" grab the contents of the visual selection
" thanks to http://stackoverflow.com/a/6271254
    function! VS()
        let [lnum1, col1] = getpos("'<")[1:2]
        let [lnum2, col2] = getpos("'>")[1:2]
        let lines = getline(lnum1, lnum2)
        let lines[-1] = lines[-1][: col2 - 2]
        let lines[0] = lines[0][col1 - 1:]
        return join(lines, "\n")
    endfunction

" add a DiffWithSaved() command to see what changes we haven't saved yet
    function! s:DiffWithSaved()
        let filetype=&ft
        diffthis
        vnew | r # | normal! 1Gdd
        diffthis
        exe "setlocal bt=nofile bh=wipe nobl noswf ro ft=" . filetype
    endfunction
    com! DiffSaved call s:DiffWithSaved()

" PLUGIN - vundle
    " NOTES
    "   This requires pre-cloning of the git repository, eg:
    "   $ git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle
    " required settings for vundle
    set      nocompatible
    filetype off
    set      rtp+=~/.vim/bundle/vundle
    call     vundle#rc()
    " have vundle manage vundle
    Bundle "gmarik/vundle"

" PLUGIN - powerline
    " NOTES
    "    For this to look decent on Mac OS X, you need to download a Powerline
    "    patched font and enable it, or build your own. I use "Menlo" patched
    "    from https://gist.github.com/1595572.
    " install powerline
    Bundle "Lokaltog/vim-powerline"
    set laststatus=2                  " turn on statusbar
    let g:Powerline_symbols = 'fancy' " use fancy utf-8 symbols

" PLUGIN - vim-surround
    Bundle "tpope/vim-surround"

" PLUGIN - vim-git
    Bundle "tpope/vim-git"

" PLUGIN - vim-fugitive
    Bundle "tpope/vim-fugitive"

" PLUGIN - vim-markdown
    Bundle "tpope/vim-markdown"
    let g:markdown_fenced_languages = [
                \     'apacheconf=apache', 'aconf=apache', 'html', 'css',
                \     'javascript', 'perl', 'ruby', 'php', 'diff'
                \   ]

" PLUGIN - NERDTree
    Bundle "scrooloose/nerdtree"

" PLUGIN - Syntastic
    Bundle "scrooloose/syntastic"
    let g:syntastic_always_populate_loc_list = 1
    let g:syntastic_check_on_open = 1
    let g:syntastic_mode_map = { 'mode': 'active',
                \     'passive_filetypes': ['php']
                \   }

" PLUGIN - undo-tree
    Bundle "mbbill/undotree"

" PLUGIN - puppet-syntax-vim
    Bundle "puppetlabs/puppet-syntax-vim"
    au FileType puppet set shiftwidth=2
    au FileType puppet set tabstop=2

" PLUGIN - vim-indent-guides
    " NOTES
    "     This plugin uses matchadd() all over the place and causes tons of
    "     errors if it doesn't exist, so we'll check for it before trying to
    "     turn any of this on, since vim older than 7.2 isn't guaranteed to
    "     have it.
    if exists('*matchadd')
        Bundle "nathanaelkane/vim-indent-guides"
        " prevent errors from cropping up
        hi Normal ctermbg=black
        let g:indent_guides_start_level = 2 " no clue
        let g:indent_guides_guide_size  = 1 " no fat guides
        let g:indent_guides_auto_colors = 0 " skip auto-color decisions
        " make some pretty colors
        au VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=235
        au VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=236
        " turn it on by default
        au VimEnter * :IndentGuidesEnable
    endif

" PLUGIN - vim-signature
    Bundle "kshenoy/vim-signature"

" PLUGIN - SyntaxRange
    Bundle "SyntaxRange"
    au FileType vim call SyntaxRange#Include(
                \     'perl <<', '.', 'perl'
                \   )
    au FileType sql call SyntaxRange#Include(
                \     '  AS \$PERL\$', '  \$PERL\$;', 'perl'
                \   )
    au FileType sql call SyntaxRange#Include(
                \     'DO \$PERL\$', '\$PERL\$ LANGUAGE PLPERL;', 'perl'
                \   )

" PLUGIN - vim-slime
    Bundle "jpalardy/vim-slime"
    let g:slime_target = "tmux"

" PLUGIN - spacehi
    Bundle "jpalardy/spacehi.vim"

" PLUGIN - delimitMate
    Bundle "Raimondi/delimitMate"

" PLUGIN - snipMate
    Bundle "msanders/snipmate.vim"
    au FileType snippet set noexpandtab

" PLUGIN - php.vim
    " we're manually specifying the vim-scripts repository to load, as many
    " scripts have this name and we just wind up with the earliest one, rather
    " than the most recent
    Bundle "vim-scripts/php.vim--Garvin"

" SYNTAX - perl-mauke
    Bundle "vim-scripts/perl-mauke.vim"
    let perl_include_pod = 1
    let perl_fold        = 1

" COLORSCHEME - BadWolf
    Bundle "sjl/badwolf"
    colorscheme badwolf

" post-vundle-install required setting
    filetype plugin indent on
