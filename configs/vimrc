let s:rcdir = $RCDIR

" if we don't have an $RCDIR specified, we might need to construct it
" manually; this is generally when we're run under 'sudo', but it could
" theoretically happen at other times as well. sadly, this duplicates some
" work from the .bashrc/.zshrc files, but them's the breaks.
if s:rcdir == ''
    let s:home = $HOME

    if s:home != ''
        let s:dirfile = s:home . '.rcdir'
        if filereadable(s:dirfile)
            let s:command = 'cat ' . shellescape(s:dirfile)
            let s:rcdir   = system(s:command)
        else
            let s:rcdir = s:home . '/.rc'
        endif
    endif
endif

" if we couldn't get a decent $RCDIR substitute (which at this point means not
" having a $HOME at all, which is weird), then we shouldn't try to load any
" file based on it, which is essentially our whole configuration.
if s:rcdir != ''
    " initialize our vimrc loader
    execute 'source ' . s:rcdir . '/configs/vim/init.vim'

    " load in our various script files to construct our particular set of
    " settings.
    call g:myVim.LoadScript('directory-vimrc')
    call g:myVim.LoadScript('projects')
    call g:myVim.LoadScript('mappings')
    call g:myVim.LoadScript('settings')
    call g:myVim.LoadScript('filetypes')
    call g:myVim.LoadScript('vundle')
endif

" add a DiffWithSaved() command to see what changes we haven't saved yet
    function! s:DiffWithSaved()
        let filetype=&ft
        diffthis
        vnew | r # | normal! 1Gdd
        diffthis
        exe "setlocal bt=nofile bh=wipe nobl noswf ro ft=" . filetype
    endfunction
    com! DiffSaved call s:DiffWithSaved()

set modeline
