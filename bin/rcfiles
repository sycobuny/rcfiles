#!/usr/bin/env perl

use warnings;
use strict;

use File::Spec::Functions;
use File::Path qw(make_path);
use Cwd        qw(abs_path);

{ package RCFiles;
    # import subs we just loaded from the main namespace
    *catfile   = *::catfile;
    *make_path = *::make_path;
    *abs_path  = *::abs_path;

    our ($__QUIET__) = 0;
    our (@histories) = qw(bash mysql psql zsh);
    our (@symlinks)  = qw(bashrc gitconfig psqlrc tmux.conf vimrc zshrc);
    our (@unsets)    = qw(alias.full-diff);
    our (%settings)  = (
        'alias.ls-untracked'      => 'ls-files -o --exclude-standard',
        'alias.full-reset'        =>
            '!git reset --hard HEAD && git clean -fx',
        'alias.is-dirty'          =>
            '![ $(git status --porcelain | wc -l) -ne 0 ]',
        'filter.gitconfig.clean'  =>
            '$(git root)/setup/strip-ini-section.pl user',
        'filter.gitconfig.smudge' => 'cat',
    );

    predeclared_subs: {
        # pseudo-constants
        sub __success__() { 0 }
        sub __failure__() { 1 }

        # silence-able wrappers to print() and warn()
        sub __print($);
        sub __warn($);

        # consistently-styled messages
        sub __good($);
        sub __bad($);
        sub __die($);

        # work around the git config stripping
        sub __stash_git_user();
        sub __restore_git_user();
        sub __guess_git_user();

        # run a command with given environmental parameters
        sub __run($@);

        # run this script again as a subcommand
        sub __exec($);

        # run a git command on the rcfiles repository
        sub __git(@);

        # explain how to use this script, or a single command in it
        sub __usage(;$);

        # get a subref from a name
        sub __findsub($);
    }

    # Link all configuration files to the rcfiles copies
    #
    # If any given configuration file exists, it is first moved to be the
    # local verison in the rcfiles repository. Then, a symlink is created so
    # that this configuration will continue to be used. In this way, any
    # changes made can be easily reviewed and either committed or discarded.
    sub relink {
        my ($modified) = 0;
        foreach my $symlink (@symlinks) {
            my ($sympath)  = catfile($ENV{HOME}, ".$symlink");
            my ($realpath) = catfile($ENV{RCDIR}, 'configs', $symlink);
            my ($resolved) = abs_path($sympath);

            next if ($resolved eq $realpath);

            if (-e $resolved) {
                if (rename($resolved, $realpath)) {
                    $modified = 1;
                    __good "Moved $resolved to $realpath";
                }
                else {
                    return __die "Could not move $resolved to $realpath";
                }
            }

            if (symlink($realpath, $sympath)) {
                $modified = 1;
                __good "Linked $sympath to $realpath";
            }
            else {
                return __die "Could not link $sympath to $realpath";
            }
        }

        __good('Existing files are properly linked') unless $modified;

        __success__
    }

    # Move and merge history files into $HOME/.history
    #
    # To help keep `$HOME` clean, any given history file is moved to a
    # `$HOME/.history` subdirectory. This function will create the
    # `$HOME/.history` directory and then try to move any existing history
    # files from `$HOME` to that directory. If both locations exist, the files
    # will be merged, with the file with the oldest "last modified" timestamp
    # appearing first. After that, any files remaining in `$HOME` will be
    # removed.
    sub mergehist {
        my ($modified) = 0;
        my ($histdir)  = catfile($ENV{HOME}, '.history');
        unless (-d $histdir) {
            make_path($histdir);

            if (-d $histdir) {
                $modified = 1;
                __good "Created history directory $histdir";
            }
            else {
                return __die "Could not create history directory $histdir";
            }
        }

        foreach my $history (@histories) {
            my ($original) = catfile($ENV{HOME}, ".${history}_history");
            my ($moved)    = catfile($histdir,   $history);

            if ((-s $original) && (-s $moved)) {
                local ($/) = undef;
                my (@files) = sort { ((stat($a))[9] <=> (stat($b))[9]) }
                              ($original, $moved);
                my (@contents);

                foreach my $file (@files) {
                    open(my ($fh), '<', $file)
                        or return __die "Couldn't read $file: $!";
                    push(@contents, <$fh>);
                    close($fh) or __bad "Couldn't close $file: $!";
                }

                open(my ($fh), '>', $moved)
                    or return __die "Couldn't open $moved for writing: $!";
                $fh->print(join("\n", @contents));
                close($fh) or return __die "Couldn't write $moved: $!\n";

                __good "Merged $original and $moved";
            }
            elsif (-s $original) {
                if (rename($original, $moved)) {
                    $modified = 1;
                    __good "Moved $original to $moved";
                }
                else {
                    return __die "Could not move $original to $moved";
                }
            }
            elsif (!-e $moved) {
                __run { FN => $moved }, qw(touch "$FN");
                if ($?) {
                    return __die "Could not create file $moved";
                }
                else {
                    $modified = 1;
                    __good "Created file $moved";
                }
            }

            if (-e $original) {
                if (unlink($original)) {
                    $modified = 1;
                    __good "Removed file $original";
                }
                else {
                    return __die "Could not remove file $original";
                }
            }
        }

        __good('Existing history files are properly merged') unless $modified;

        __success__;
    }

    # Set up git configuration for the local rcfiles repository
    #
    # Certain custom commands and configuration are necessary for the rcfiles
    # repository to work properly with the rcfiles binary and other commands.
    # This command will ensure that this configuration exists and is set
    # properly. Any existing settings that conflict will simply be
    # overwritten, but it is only local settings, so it should probably be
    # fine.
    sub gitconfig {
        my ($changed);

        foreach my $setting (@unsets) {
            __git { SETTING => $setting }, qw(config --local "$SETTING");

            unless ($?) {
                $changed = 1;
                __git { SETTING => $setting },
                      qw(config --local --unset-all "$SETTING");

                if ($?) { __bad "Could not unset $setting" }
                else    { __good "Unset $setting"          }
            }
        }

        while (my ($setting, $value) = each(%settings)) {
            my ($curval) = __git('config', $setting) || '';
            chomp($curval);

            if ($curval ne $value) {
                $changed = 1;
                __git { VALUE => $value }, qq(config $setting "\$VALUE");

                if ($?) { __bad "Could not set $setting to $value" }
                else    { __good "Set $setting to $value" }
            }
        }

        # since nothing else would happen when this is called, let people know
        # the command was successful.
        __good 'Existing configuration is valid' unless $changed;

        # by now, though, we've done everything we were tasked with doing
        __success__
    }

    # Run all post-install/update configurations
    #
    # After updates or installation, or just in case you've made some local
    # home directory changes outside of the repo that you want to ensure
    # haven't messed anything up, this command will run through the various
    # self-configuration steps and run them all. Each command is run
    # independent of the others, so you may get a fatal error in one but the
    # next will execute properly.
    #
    # The exit status of this command, however, is success if all
    # configurations succeed, and failure if any of them does not.
    sub autoconfig {
        my ($status) = __success__;

        $status = __failure__ if (relink    == __failure__);
        $status = __failure__ if (mergehist == __failure__);
        $status = __failure__ if (gitconfig == __failure__);

        __restore_git_user && __guess_git_user;

        $status
    }

    # Show whether the rcfiles repoository has been locally modified
    #
    # If any files have been locally modified, or any untracked files exist,
    # then this command will tell you.
    #
    # Note that the `~/.gitconfig` file has a special case for ignoring only
    # `[user]` sections, and if you modify these sections, it may report as
    # modified even if it doesn't show any changes. If `rcfiles diff` does not
    # show any modifications, it is either this or that certain files have
    # already been staged. In the latter case, however, you should know this
    # is why that's happened, cause there's no facility to do this in
    # `rcfiles`; you'd have to have edited the files yourself. In either
    # situtation, you can tell by running the following command:
    #
    #   (cd $RCDIR && git status)
    sub status {
        __git 'is-dirty';
        if ($?) {
            __good 'RC Files are locally unmodified';
            __success__
        }
        else {
            __good 'RC Files have been locally modified';
            __good '';
            __good 'To view differences, run:';
            __good '  rcfiles diff';
            __good '';
            __good 'To save changes, run:';
            __good '  rcfiles save';
            __good '';
            __good 'To clear changes, run:';
            __good '  rcfiles reset';

            __failure__
        }
    }

    # Show all local modifications
    #
    # Any changes not staged in the index, including untracked files, will be
    # listed from this command. As per a regular `git diff` command, if the
    # differences are large enough, the output will be piped into the default
    # pager.
    sub diff {
        my ($changed);
        get_status: {
            local $__QUIET__ = 1;
            $changed = status;
        }

        if ($changed) {
            __git { use_system => 1}, 'full-diff';
            $?
        }
        else {
            __die 'No changes'
        }
    }

    # Save all local changes to the remote repository
    #
    # Any changes, including untracked files, will be added and committed to
    # the repository, assuming the commit process is successful (i.e., you
    # must provide a message in the editor). If this is successful, the
    # changes will also be pushed to the remote repository.
    sub save {
        if (update() == __failure__) {
            return __die "Will not save without updating";
        }

        my (@untracked) = grep { /./ } split(/\n/, __git 'ls-untracked');
        my ($exit) = sub {
            foreach my $untracked (@untracked) {
                chomp($untracked);
                __git { TO_REMOVE => $untracked },
                      qw(reset HEAD "$TO_REMOVE");
            }
            shift;
        };

        foreach my $untracked (@untracked) {
            chomp($untracked);

            __git { TO_ADD => $untracked }, qw(add "$TO_ADD");

            if ($?) {
                __die "Could not add untracked $untracked";
                return $exit->(__failure__);
            }
        }

        __git { use_system => 1}, qw(commit -a);
        if ($?) {
            __die 'Could not complete commit';
            return $exit->(__failure__);
        }

        __git 'push';
        if ($?) { __die 'Could not submit updates to remote "origin"' }
        else    { __good 'Submitted changes to remote "origin"'       }
    }

    # Revert all local changes
    #
    # Any changes that have been made to the local copy of the rcfiles
    # repository will be completely reverted, including untracked files and
    # anything that's staged in the index.
    sub reset {
        if (do { local $__QUIET__ = 1; status() } == __success__) {
            __good 'Nothing to do';
            return __success__;
        }

        __stash_git_user;
        __git 'full-reset';

        if ($?) {
            __die 'Could not reset all local modifications'
        }
        else {
            __restore_git_user;
            __good 'RC Files have been reset'
        }
    }

    # Pull remote changes to the rcfiles repository
    #
    # This will attempt to fetch all remote changes and merge them into the
    # local copy. If this is successful, then it will attempt to re-load the
    # configuration with the updated changes. However, new shell functions and
    # configurations cannot be reloaded because the environment cannot be
    # exported this way. You must run `reshell` afterwards to accomplish this.
    sub update {
        my ($output, $changed);

        __stash_git_user;

        $output  = __git qw(fetch origin);
        if ($?) {
            return __die 'Could not synchronize with remote repository';
        }
        elsif ($output) {
            __good 'Synchronized new changes';
            $changed = 1;
        }

        $output = __git qw(merge --ff-only origin/master);
        if ($?) {
            return __die "Could not merge with remote changes";
        }
        elsif ($output !~ /Already up-to-date\./) {
            __good 'Merged new changes from "origin"';
            $changed = 1;
        }

        if ($changed) {
            __exec 'autoconfig';
            __restore_git_user;

            __good 'Update process complete';
            __good '';
            __good 'Please run the following to reload configuration for ' .
                   'any active shell sessions:';
            __good '  reshell';
        }
        else {
            __good 'No new updates';
        }
    }

    # Print help and exit
    #
    # This will summarize the usage of the `rcfiles` command. If you provide
    # an optional command, then additional information will be provided for
    # that command.
    sub help {
        my ($command) = shift;
        __usage $command;

        __success__
    }

    sub __print($) {
        return if $__QUIET__;
        print shift;
    }

    sub __warn($) {
        return if $__QUIET__;
        warn shift;
    }

    sub __good($) {
        __print "=> @{[ shift ]}\n";
        __success__
    }

    sub __bad($) {
        __warn "@{[ shift ]}\n";
    }

    sub __die($) {
        __warn "fatal: @{[ shift ]}\n";
        __failure__
    }

    stash_git_user: {
        my ($userconfig) = {};

        sub __stash_git_user() {
            my ($output) = __git qw(config --global -l);

            foreach my $line (split("\n", $output)) {
                next unless $line =~ /^user\.([^=]+)=(.+)$/;
                my ($key, $value) = ($1, $2);

                $userconfig->{$key} = $value;
            }
        }

        sub __restore_git_user() {
            foreach my $key (keys %{ $userconfig }) {
                my ($env) = { key => $key, value => $userconfig->{$key} };
                __git $env, qw(config --global "user.${key}" "${value}");
            }
        }

        sub __guess_git_user() {
            __stash_git_user;
            return if ($userconfig->{name} && $userconfig->{email});

            unless ($userconfig->{name}) {
                my ($name) = __git qw(log --format=format:'%an' | head -n1);
                chomp $name;

                my ($env) = { name => $name };
                __git $env, qw(config --global user.name = ${name});

                __good "Guessed git user name from commit log as '$name'";
            }

            unless ($userconfig->{name}) {
                my ($email) = __git qw(log --format=format:'%ae' | head -n1);
                chomp $email;

                my ($env) = { email => $email };
                __git $env, qw(config --global user.email = ${email});

                __good "Guessed git user email from commit log as '$email'";
            }
        }
    }

    sub __run($@) {
        local ($") = ' ';

        my ($env)     = shift;
        my (@command) = @_;
        my ($backup)  = {};
        my ($unset)   = {};
        my ($output);

        $env ||= {};

        foreach my $key (keys %$env) {
            if (exists($ENV{$key})) {
                $backup->{$key} = $ENV{$key};
            }
            else {
                $unset->{$key} = 1;
            }

            $ENV{$key} = $env->{$key};
        }

        if ($env->{use_system}) {
            $output = system(@command);
            $? >>= 8;
        }
        else {
            push @command, '2>/dev/null';
            $output = `@command`;
        }

        foreach my $key (keys %$backup) { $ENV{$key} = $backup->{$key} }
        foreach my $key (keys %$unset ) { delete $ENV{$key}            }

        $output;
    }

    sub __exec($) {
        my ($command) = @_;
        my ($perl)    = $^X; # should work well enough...
        my ($rcfiles) = $0;

        __run { use_system => 1 }, $perl, $rcfiles, $command;
        $?;
    }

    sub __git(@) {
        my (@command) = @_;
        my ($env)     = {};

        $env = shift(@command) if (ref($command[0]) && $command[0] =~ /HASH/);
        unshift(@command, 'git');

        $env->{GIT_WORK_TREE} ||= $ENV{RCDIR};
        $env->{GIT_DIR}       ||= catfile($ENV{RCDIR}, '.git');

        __run $env, @command;
    }

    sub __usage(;$) {
        my ($command) = shift;
        my ($pos)     = tell DATA;
        my ($docs)    = {};
        my ($comment) = qr/^\s*\# ?(.*)/;
        my ($sub)     = qr/^\s*sub ([_a-zA-Z][_a-zA-Z0-9]*) \{/;
        my ($hidden)  = qr/^__/;
        my ($maxlen)  = 0;
        my (@contents, @comments);
        seek DATA, 0, 0;

        @contents = <DATA>;

        foreach my $line (@contents) {
            chomp $line;

            if ($line =~ $comment) { push @comments, $1 }
            elsif ($line =~ $sub) {
                my ($summary, $blank, @description) = @comments;
                my ($name) = $1;

                @comments = ();
                next if ($1 =~ $hidden);

                $docs->{$name} = {
                    summary     => ($summary || ''),
                    description => \@description,
                };

                $maxlen = length($name) unless (length($name) <= $maxlen);
            }
            else {
                @comments = ();
            }
        }

        seek DATA, 0, $pos;

        if ($command) {
            if (exists($docs->{$command})) {
                __good "  rcfiles $command";
                __good $docs->{$command}{summary};
                __good (('-=' x 15) . '-');

                foreach my $line (@{ $docs->{$command}{description} }) {
                    __good $line;
                }
            }
            else {
                return __die "Unknown command: $command";
            }
        }
        else {
            __good 'Usage: rcfiles <command>';
            __good '';
            __good 'Available commands are:';

            foreach my $command (sort keys %$docs) {
                my ($summary) = $docs->{$command}{summary};
                $command = $command . (' ' x ($maxlen - length($command)));
                __good "  $command - $summary";
            }

            __good '';
            __good 'For additional help, try:';
            __good '  rcfiles help [command]';
        }

        __failure__
    }

    sub __findsub($) {
        no strict 'refs'; ## no critic TestingAndDebugging::ProhibitNoStrict
        *{"*@{[ __PACKAGE__ ]}::@{[ shift ]}"}{CODE};
    }

    sub __main__ {
        my ($command) = shift;
        exit __usage unless $command;

        my ($subref) = __findsub($command);
        exit __usage unless $subref;

        exit($subref->(@_) || __success__);
    }
}

RCFiles::__main__(@ARGV) if ($0 eq __FILE__);

package RCFiles;
__DATA__
