#!/usr/bin/env perl

use warnings;
use strict;

use File::Spec::Functions;
use Cwd qw(abs_path);

{ package RCFiles;
    # import subs we just loaded from the main namespace
    *abs_path = *::abs_path;
    *catfile  = *::catfile;

    our ($__QUIET__) = 0;
    our (@symlinks)  = qw(bashrc gitconfig psqlrc tmux.conf vimrc zshrc);
    our (%settings)  = (
        'alias.full-diff'         => '!$(git root)/setup/git-full-diff.sh',
        'alias.ls-untracked'      => 'ls-files -o --exclude-standard',
        'alias.is-dirty'          =>
            '![ $(git status --porcelain | wc -l) -ne 0 ]',
        'filter.gitconfig.clean'  =>
            '$(git root)/setup/strip-ini-section.pl %f user',
        'filter.gitconfig.smudge' => 'cat',
    );

    predeclared_subs: {
        sub __print__($);
        sub __warn__($);
        sub __chdir__(;$);
        sub __success__() { 0 }
        sub __failure__() { 1 }
    }

    sub relink {
        foreach my $symlink (@symlinks) {
            my ($sympath)  = catfile($ENV{HOME}, ".$symlink");
            my ($realpath) = catfile($ENV{RCDIR}, 'configs', $symlink);
            my ($resolved) = abs_path($sympath);

            next if ($resolved eq $realpath);

            if (-e $resolved) {
                __print__ "=> Moving $resolved to $realpath\n";
                rename($resolved, $realpath) if (-e $resolved);
            }

            __print__ "=> Linking $sympath to $realpath\n";
            symlink($realpath, $sympath);
        }

        __success__
    }

    sub autoconfig {
        my ($changed);
        my ($cwd) = `pwd`;
        chomp($cwd);

        __chdir__ or return __failure__;

        while (my ($setting, $value) = each(%settings)) {
            my ($curval) = `git config $setting` || '';
            chomp($curval);

            if ($curval ne $value) {
                $changed = 1;

                $ENV{VALUE} = $value;
                `git config $setting "\$VALUE"`;

                if ($?) { __warn__ "Could not set $setting to $value\n" }
                else    { __print__ "=> set $setting to $value\n" }
            }
        }

        # since nothing else would happen when this is called, let people know
        # the command was successful.
        __print__ "=> Existing configuration is valid\n" unless $changed;

        unless (chdir $cwd) {
            __warn__ "Couldn't return to working directory $cwd\n";
        }
        __success__
    }

    sub status {
        __chdir__ or return __failure__;

        `git is-dirty 2>&1 1>/dev/null`;
        if ($?) {
            __print__ "=> RC Files are locally unmodified\n";
            __success__
        }
        else {
            __print__ "=> RC Files have been locally modified\n=>\n";
            __print__ "=> To view differences, run:\n=>   rcfiles diff\n=>\n";
            __print__ "=> To save changes, run:\n=>   rcfiles save\n";

            __failure__
        }
    }

    sub diff {
        __chdir__ or return __failure__;
        system(qw(git full-diff)) ? __failure__ : __success__
    }

    sub save {
        if (update() == __failure__) {
            __warn__ "fatal: Will not save without updating\n";
            return __failure__;
        }

        __chdir__ or return __failure__;
        my (@untracked) = `git ls-untracked 2>&1`;
        my ($exit) = sub {
            foreach my $untracked (@untracked) {
                chomp($untracked);
                $ENV{TO_REMOVE} = $untracked;
                `git reset HEAD "\$TO_REMOVE"`;
            }
            shift;
        };

        foreach my $untracked (@untracked) {
            chomp($untracked);

            $ENV{TO_ADD} = $untracked;
            `git add "\$TO_ADD" 2>&1`;

            if ($?) {
                __warn__ "fatal: Could not add untracked $untracked\n";
                return $exit->(__failure__);
            }
        }

        system(qw(git commit -a));
        if ($?) {
            __warn__ "fatal: Could not complete commit\n";
            return $exit->(__failure__);
        }

        `git push 2>&1`;
        if ($?) {
            __warn__ "fatal: Could not submit updates to remote 'origin'\n";
            __failure__
        }
        else {
            __print__ "=> Submitted changes to remote 'origin'\n";
            __success__
        }
    }

    sub update {
        my ($output, $changed);
        __chdir__ or return __failure__;

        $output  = `git fetch origin 2>&1`;
        if ($?) {
            __warn__ "fatal: Could not synchronize with remote repository\n";
            return __failure__;
        }
        elsif ($output) {
            __print__ "=> Synchronized new changes\n";
            $changed = 1;
        }

        $output = `git merge --ff-only master origin/master 2>&1`;
        if ($?) {
            __warn__ "fatal: Could not merge with remote changes\n";
            return __failure__;
        }
        elsif ($output !~ /Already up-to-date\./) {
            __print__ "=> Merged new changes from 'origin'\n";
            $changed = 1;
        }

        if ($changed) {
            autoconfig();
            relink();

            __print__ "=> Update process complete\n";
            __print__ "=> Please run the following to reload configuration " .
                      "for any active shell sessions:\n";
            __print__ "=>\n";
            __print__ "=>   reshell\n";
        }
        else {
            __print__ "=> No new updates\n" unless $changed;
        }
        __success__
    }

    sub __print__($) {
        return if $__QUIET__;
        print shift;
    }

    sub __warn__($) {
        return if $__QUIET__;
        warn shift;
    }

    sub __chdir__(;$) {
        my ($nonfatal) = shift;

        unless (chdir($ENV{RCDIR})) {
            my ($errmsg) = "Could not switch to $ENV{RCDIR}\n";
            $errmsg = "fatal: $errmsg" unless $nonfatal;

            warn $errmsg;
            return;
        }

        return 1;
    }

    sub __findsub__ {
        no strict 'refs';
        *{"*@{[ __PACKAGE__ ]}::@{[ shift ]}"}{CODE};
    }

    sub __main__ {
        my ($command) = shift;
        exit __failure__ unless $command;

        my ($subref) = __findsub__($command);
        exit __failure__ unless $subref;

        exit($subref->() || __success__);
    }
}

RCFiles::__main__(@ARGV) if ($0 eq __FILE__);
